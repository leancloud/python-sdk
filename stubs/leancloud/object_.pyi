import leancloud
from leancloud.query import Query
from leancloud.acl import ACL

from typing import Any, Dict, Union, SupportsFloat


class Object(object):
    def __init__(self, **attrs) -> None: ...
    
    @classmethod
    def extend(cls, name: str):...

    @classmethod
    def create(cls, class_name: str, **attributes):...

    @classmethod
    def create_without_data(cls, id_: str):...
    
    @classmethod
    def save_all(cls, objs: List[Object]):...

    @classmethod
    def destroy_all(cls, objs: List[Object]):...

    @property
    def attributes(self):...

    def destroy(self):...

    def save(self, where: Query=None):...

    def get(self, attr: str) -> Any:...

    def relation(self, attr: str) -> Any:...

    def has(self, attr: str) -> bool: ...

    def set(self, key_or_attrs: Union[str,Dict[Any,Any]], value: str=None, unset: bool=False) -> Object:...

    def unset(self, attr: str) -> Object:...

    def increment(self, attr: str, amount: SupportsFloat=1) -> Object:...

    def add(self, attr: str, item: Any):...

    def remove(self, attr: str, item: Any):...

    def clear(self):...

    def fetch(self):...

    def is_new(self):...

    def is_exitsted(self):...

    def get_acl(self):...

    def set_acl(self, ACL):...
